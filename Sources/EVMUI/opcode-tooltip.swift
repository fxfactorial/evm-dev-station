import Foundation

// https://www.ethervm.io/#opcodes
let OPCODE_TOOLTIP : [String: String] = [
  "STOP": "halts execution of the contract",
  "ADD": "(u)int256 addition modulo 2**256",
  "MUL":"(u)int256 multiplication modulo 2**256",
  "SUB":"(u)int256 subtraction modulo 2**256",
  "DIV":"uint256 division",
  "SDIV":"int256 division",
  "MOD":"uint256 modulus",
  "SMOD":"int256 modulus",
  "ADDMOD":"(u)int256 addition modulo N",
  "MULMOD":"(u)int256 multiplication modulo N",
  "EXP":"uint256 exponentiation modulo 2**256",
  "SIGNEXTEND":"sign extends x from (b + 1) * 8 bits to 256 bits.",
  "LT":"uint256 comparison",
  "GT":"uint256 comparison",
  "SLT":"int256 comparison",
  "SGT":"int256 comparison",
  "EQ":"(u)int256 equality",
  "ISZERO":"(u)int256 is zero",
  "AND":"256-bit bitwise and",
  "OR":"256-bit bitwise or",
  "XOR":"256-bit bitwise xor",
  "NOT":"256-bit bitwise not",
  "BYTE":"ith byte of (u)int256 x, counting from most significant byte",
  "SHL":"256-bit shift left",
  "SHR":"256-bit shift right",
  "SAR":"int256 shift right",
  "SHA3":"keccak256",
  "ADDRESS":"address of the executing contract",
  "BALANCE":"address balance in wei",
  "ORIGIN":"transaction origin address",
  "CALLER":"message caller address",
  "CALLVALUE":"message funds in wei",
  "CALLDATALOAD":"reads a (u)int256 from message data",
  "CALLDATASIZE":"message data length in bytes",
  "CALLDATACOPY": "copy message data",
  "CODESIZE":"length of the executing contract's code in bytes",
  "CODECOPY":"copy executing contract's bytecode",
  "GASPRICE":"gas price of the executing transaction, in wei per unit of gas",
  "EXTCODESIZE":"length of the contract bytecode at addr, in bytes",
  "EXTCODECOPY":"copy contract's bytecode",
  "RETURNDATASIZE":"Byzantium hardfork, EIP-211: the size of the returned data from the last external call, in bytes",
  "RETURNDATACOPY":"Byzantium hardfork, EIP-211: copy returned data",
  "EXTCODEHASH":"Constantinople hardfork, EIP-1052: hash of the contract bytecode at addr",
  "BLOCKHASH":"hash of the specific block, only valid for the 256 most recent blocks, excluding the current one",
  "COINBASE":"address of the current block's miner",
  "TIMESTAMP":"current block's Unix timestamp in seconds",
  "NUMBER":"current block's number",
  "DIFFICULTY":"current block's difficulty",
  "GASLIMIT":"current block's gas limit",
  "CHAINID":"Istanbul hardfork, EIP-1344: current network's chain id",
  "SELFBALANCE":"Istanbul hardfork, EIP-1884: balance of the executing contract in wei",
  "BASEFEE":"London hardfork, EIP-3198: current block's base fee",
  "POP":"pops a (u)int256 off the stack and discards it",
  "MLOAD":"reads a (u)int256 from memory",
  "MSTORE":"writes a (u)int256 to memory",
  "MSTORE8":"writes a uint8 to memory",
  "SLOAD":"reads a (u)int256 from storage",
  "SSTORE":"writes a (u)int256 to storage",
  "JUMP":"unconditional jump",
  "JUMPI":"conditional jump if condition is truthy",
  "PC":"program counter",
  "MSIZE":"size of memory for this contract execution, in bytes",
  "GAS":"remaining gas",
  "JUMPDEST":"metadata to annotate possible jump destinations",
  "PUSH1":"pushes a 1-byte value onto the stack",
  "PUSH2":"pushes a 2-byte value onto the stack",
  "PUSH3":"pushes a 3-byte value onto the stack",
  "PUSH4":"pushes a 4-byte value onto the stack",
  "PUSH5":"pushes a 5-byte value onto the stack",
  "PUSH6":"pushes a 6-byte value onto the stack",
  "PUSH7":"pushes a 7-byte value onto the stack",
  "PUSH8":"pushes a 8-byte value onto the stack",
  "PUSH9":"pushes a 9-byte value onto the stack",
  "PUSH10":"pushes a 10-byte value onto the stack",
  "PUSH11":"pushes a 11-byte value onto the stack",
  "PUSH12":"pushes a 12-byte value onto the stack",
  "PUSH13":"pushes a 13-byte value onto the stack",
  "PUSH14":"pushes a 14-byte value onto the stack",
  "PUSH15":"pushes a 15-byte value onto the stack",
  "PUSH16":"pushes a 16-byte value onto the stack",
  "PUSH17":"pushes a 17-byte value onto the stack",
  "PUSH18":"pushes a 18-byte value onto the stack",
  "PUSH19":"pushes a 19-byte value onto the stack",
  "PUSH20":"pushes a 20-byte value onto the stack",
  "PUSH21":"pushes a 21-byte value onto the stack",
  "PUSH22":"pushes a 22-byte value onto the stack",
  "PUSH23":"pushes a 23-byte value onto the stack",
  "PUSH24":"pushes a 24-byte value onto the stack",
  "PUSH25":"pushes a 25-byte value onto the stack",
  "PUSH26":"pushes a 26-byte value onto the stack",
  "PUSH27":"pushes a 27-byte value onto the stack",
  "PUSH28":"pushes a 28-byte value onto the stack",
  "PUSH29":"pushes a 29-byte value onto the stack",
  "PUSH30":"pushes a 30-byte value onto the stack",
  "PUSH31":"pushes a 31-byte value onto the stack",
  "PUSH32":"pushes a 32-byte value onto the stack",
  "DUP1":"clones the last value on the stack",
  "DUP2":"clones the 2nd last value on the stack",
  "DUP3":"clones the 3rd last value on the stack",
  "DUP4":"clones the 4th last value on the stack",
  "DUP5":"clones the 5th last value on the stack",
  "DUP6":"clones the 6th last value on the stack",
  "DUP7":"clones the 7th last value on the stack",
  "DUP8":"clones the 8th last value on the stack",
  "DUP9":"clones the 9th last value on the stack",
  "DUP10":"clones the 10th last value on the stack",
  "DUP11":"clones the 11th last value on the stack",
  "DUP12":"clones the 12th last value on the stack",
  "DUP13":"clones the 13th last value on the stack",
  "DUP14":"clones the 14th last value on the stack",
  "DUP15":"clones the 15th last value on the stack",
  "DUP16":"clones the 16th last value on the stack",
  "SWAP1":"swaps the last two values on the stack",
  "SWAP2":"swaps the top of the stack with the 3rd last element",
  "SWAP3":"swaps the top of the stack with the 4th last element",
  "SWAP4":"swaps the top of the stack with the 5th last element",
  "SWAP5":"swaps the top of the stack with the 6th last element",
  "SWAP6":"swaps the top of the stack with the 7th last element",
  "SWAP7":"swaps the top of the stack with the 8th last element",
  "SWAP8":"swaps the top of the stack with the 9th last element",
  "SWAP9":"swaps the top of the stack with the 10th last element",
  "SWAP10":"swaps the top of the stack with the 11th last element",
  "SWAP11":"swaps the top of the stack with the 12th last element",
  "SWAP12":"swaps the top of the stack with the 13th last element",
  "SWAP13":"swaps the top of the stack with the 14th last element",
  "SWAP14":"swaps the top of the stack with the 15th last element",
  "SWAP15":"swaps the top of the stack with the 16th last element",
  "SWAP16":"swaps the top of the stack with the 17th last element",
  "LOG0":"LOG0(memory[offset:offset+length])",
  "LOG1":"LOG1(memory[offset:offset+length], topic0)",
  "LOG2":"LOG2(memory[offset:offset+length], topic0, topic1)",
  "LOG3":"LOG3(memory[offset:offset+length], topic0, topic1, topic2)",
  "LOG4":"LOG4(memory[offset:offset+length], topic0, topic1, topic2, topic3)",
  "CREATE":"addr = new memory[offset:offset+length].value(value) creates a child contract",
  "CALL":"calls a method in another contract",
  "CALLCODE":"",
  "RETURN":"returns from this contract call",
  "DELEGATECALL":"Homestead hardfork, EIP-7: calls a method in another contract, using the storage of the current contract",
  "CREATE2":"Constantinople harfork, EIP-1014: creates a child contract with a deterministic address",
  "STATICCALL":"Byzantium hardfork, EIP-214: calls a method in another contract with state changes such as contract creation, event emission, storage modification and contract destruction disallowed",
  "REVERT":"Byzantium hardfork, EIP-140: reverts with return data",
  "SELFDESTRUCT":"destroys the contract and sends all funds to addr."
]
